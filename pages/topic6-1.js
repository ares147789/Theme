import Head from "next/head";
import Link from "next/link";

export default function Topic5_1() {
  return (
    <>
      <Head>
        <title>Topic 5.1 - Your Course</title>
      </Head>
      <header  className="navbar">
      <nav>
          <Link href="/" legacyBehavior><a className="nav-link">หน้าหลัก</a></Link>
          <Link href="/courses" legacyBehavior><a className="nav-link">หัวข้อการเรียนรู้ภาษา C#</a></Link>
          <Link href="/about" legacyBehavior><a className="nav-link">ผู้จัดทำ</a></Link>
          <Link href="/contact" legacyBehavior><a className="nav-link">ติดต่อเรา</a></Link>
        </nav>
      </header>
      <main role="main">
        <section class="course-content">
            <h2>6.1 การประกาศและกำหนดค่าอาร์เรย์ใน C#</h2>
            <p>อาร์เรย์ในภาษา C# เป็นโครงสร้างข้อมูลที่ใช้เก็บข้อมูลหลายๆ ค่าในตัวแปรเดียว โดยแต่ละค่าในอาร์เรย์จะมีตำแหน่ง (index) ซึ่งเริ่มต้นจาก 0 อาร์เรย์สามารถประกาศได้ทั้งแบบมีและไม่มีการกำหนดค่าเริ่มต้น</p>

            <h3>การประกาศอาร์เรย์แบบหนึ่งมิติ</h3>
            <p>การประกาศอาร์เรย์แบบหนึ่งมิติเป็นการประกาศอาร์เรย์ที่เก็บข้อมูลเรียงกันในลำดับเดียวกัน ตัวอย่างเช่น:</p>
            <pre><code>{`
// การประกาศและกำหนดค่าเริ่มต้นให้อาร์เรย์แบบหนึ่งมิติ
int[] numbers = {1, 2, 3, 4, 5};

// การประกาศอาร์เรย์แบบหนึ่งมิติโดยไม่กำหนดค่าเริ่มต้น
int[] emptyArray = new int[5]; // อาร์เรย์นี้มีขนาด 5 แต่ละค่าจะเป็น 0 โดยค่าเริ่มต้น
            </code></pre>
            <p>ในตัวอย่างแรก อาร์เรย์ <code>numbers</code> ถูกประกาศพร้อมกำหนดค่าเริ่มต้นทันที ส่วนในตัวอย่างที่สอง อาร์เรย์ <code>emptyArray</code> ถูกประกาศแต่ยังไม่มีการกำหนดค่า โดยค่าทั้งหมดในอาร์เรย์นี้จะเป็นค่าเริ่มต้นของชนิดข้อมูลนั้นๆ ซึ่งในกรณีนี้คือ 0</p>

            <h3>การประกาศอาร์เรย์แบบสองมิติ</h3>
            <p>อาร์เรย์แบบสองมิติเป็นอาร์เรย์ที่มีแถวและคอลัมน์ ซึ่งเหมาะสำหรับการจัดเก็บข้อมูลในรูปแบบตาราง ตัวอย่างเช่น:</p>
            <pre>
// การประกาศอาร์เรย์สองมิติและกำหนดค่า
int[,] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};

// การประกาศอาร์เรย์สองมิติแบบไม่กำหนดค่าเริ่มต้น
int[,] grid = new int[3, 3]; // อาร์เรย์ขนาด 3x3 ซึ่งแต่ละค่าเริ่มต้นจะเป็น 0
            </code></pre>
            <p>ในตัวอย่างนี้ อาร์เรย์ <code>matrix</code> ถูกประกาศและกำหนดค่าเริ่มต้นให้เป็นตาราง 3x3 โดยที่แต่ละแถวและคอลัมน์มีค่าแตกต่างกัน ส่วน <code>grid</code> ถูกประกาศโดยยังไม่กำหนดค่า ซึ่งค่าเริ่มต้นในแต่ละตำแหน่งจะเป็น 0</p>

            <h3>การเข้าถึงและการเปลี่ยนแปลงค่าในอาร์เรย์</h3>
            <p>เราสามารถเข้าถึงหรือเปลี่ยนแปลงค่าภายในอาร์เรย์ได้โดยใช้ดัชนี (index) ของตำแหน่งนั้นๆ</p>
            <pre><code>
// การเข้าถึงค่าในอาร์เรย์
int firstValue = numbers[0]; // เข้าถึงค่าตำแหน่งแรกในอาร์เรย์ numbers
Console.WriteLine("ค่าแรกในอาร์เรย์ numbers: " + firstValue);

// การเปลี่ยนแปลงค่าในอาร์เรย์
numbers[0] = 10; // เปลี่ยนค่าตำแหน่งแรกในอาร์เรย์ numbers
Console.WriteLine("ค่าใหม่ในตำแหน่งแรก: " + numbers[0]);

// การเข้าถึงค่าในอาร์เรย์สองมิติ
int centerValue = matrix[1, 1]; // เข้าถึงค่ากลางของตาราง matrix
Console.WriteLine("ค่ากลางในอาร์เรย์ matrix: " + centerValue);

// การเปลี่ยนแปลงค่าในอาร์เรย์สองมิติ
matrix[1, 1] = 99; // เปลี่ยนค่ากลางในตาราง matrix
Console.WriteLine("ค่ากลางใหม่ในอาร์เรย์ matrix: " + matrix[1, 1]);
            </code></pre>
            <p>การเปลี่ยนแปลงค่าในอาร์เรย์สามารถทำได้โดยการระบุค่าดัชนีของตำแหน่งที่ต้องการเปลี่ยน เช่นเดียวกับการเข้าถึงค่าภายในอาร์เรย์</p>

            <h3>การวนลูปเพื่อเข้าถึงข้อมูลในอาร์เรย์</h3>
            <p>การวนลูปเพื่อเข้าถึงข้อมูลในอาร์เรย์ทำให้สามารถประมวลผลข้อมูลได้อย่างมีประสิทธิภาพ ตัวอย่างเช่น:</p>
            <pre><code>
// วนลูปผ่านอาร์เรย์หนึ่งมิติ
for(int i = 0; i &lt; numbers.Length; i++) {
    Console.WriteLine("ค่าในตำแหน่ง " + i + ": " + numbers[i]);
}

// วนลูปผ่านอาร์เรย์สองมิติ
for(int i = 0; i &lt; matrix.GetLength(0); i++) {
    for(int j = 0; j &lt; matrix.GetLength(1); j++) {
        Console.WriteLine("ค่าที่ตำแหน่ง (" + i + "," + j + "): " + matrix[i, j]);
    }
}
            `}</code></pre>
            <p>การใช้ลูปเพื่อเข้าถึงข้อมูลในอาร์เรย์เป็นวิธีที่มีประสิทธิภาพสำหรับการจัดการกับข้อมูลจำนวนมาก โดยเฉพาะในกรณีที่ต้องทำงานกับอาร์เรย์สองมิติหรืออาร์เรย์ที่มีขนาดใหญ่</p>
        </section>
    </main>
        <section class="navigation-buttons">
            <a href="topic5-3.html" class="button">ย้อนกลับ: การรับค่าจากฟังก์ชัน</a>
            <a href="topic6-2.html" class="button">หน้าถัดไป: การเข้าถึงข้อมูลในอาร์เรย์</a>
        </section>

    <footer>
        <p>&copy; 2024 คอร์สภาษา C# สำหรับนักศึกษา. สงวนลิขสิทธิ์.</p>
    </footer>
       </>
    );
  }
 