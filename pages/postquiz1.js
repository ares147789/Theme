'use client';

import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';

export default function PostQuiz() {
    const [score, setScore] = useState(null);
    const [name, setName] = useState('');
    const [isPreQuizCompleted, setIsPreQuizCompleted] = useState(false);
    const router = useRouter();

    useEffect(() => {
        const preQuizCompleted = JSON.parse(localStorage.getItem('preQuizCompleted')) === true;
        if (preQuizCompleted) {
            setIsPreQuizCompleted(true);
        } else {
            alert('‚ö† ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡πà‡∏≠‡∏ô!');
            setTimeout(() => router.push('/'), 500);
        }
    }, [router]);

    const questions = [
        { id: "q1", question: "‡∏†‡∏≤‡∏©‡∏≤ C# ‡∏ñ‡∏π‡∏Å‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÇ‡∏î‡∏¢‡∏ö‡∏£‡∏¥‡∏©‡∏±‡∏ó‡πÉ‡∏î?", options: ["Microsoft", "Google", "Apple"], answer: "Microsoft" },
        { id: "q2", question: "C# ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô .NET framework ‡πÉ‡∏ä‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", options: ["Yes", "No"], answer: "Yes" },
        { id: "q3", question: "C# ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î?", options: ["General-purpose", "Scripting", "Markup"], answer: "General-purpose" },
        { id: "q4", question: "C# ‡πÄ‡∏õ‡∏¥‡∏î‡∏ï‡∏±‡∏ß‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å‡πÉ‡∏ô‡∏õ‡∏µ‡πÉ‡∏î?", options: ["1995", "2000", "2010"], answer: "2000" },
        { id: "q5", question: "C# ‡πÉ‡∏ä‡πâ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÉ‡∏î?", options: ["All", "Desktop", "Web"], answer: "All" },
        { id: "q6", question: "C# ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏ä‡∏¥‡∏á‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", options: ["Yes", "No"], answer: "Yes" },
        { id: "q7", question: "C# ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏û‡∏•‡∏ï‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà?", options: ["Yes", "No"], answer: "Yes" },
        { id: "q8", question: "C# ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡∏Å‡∏±‡∏ö Windows ‡∏´‡∏£‡∏∑‡∏≠ Linux?", options: ["Windows", "Linux", "Both"], answer: "Both" },
        { id: "q9", question: "C# ‡πÉ‡∏ä‡πâ‡∏Å‡∏•‡πÑ‡∏Å‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≥‡πÅ‡∏ö‡∏ö‡πÉ‡∏î?", options: ["Manual", "Garbage Collection", "Pointer"], answer: "Garbage Collection" },
        { id: "q10", question: "‡∏†‡∏≤‡∏©‡∏≤ C# ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏à‡∏≤‡∏Å‡∏†‡∏≤‡∏©‡∏≤‡πÉ‡∏î?", options: ["Java", "Python", "Derived from C and C++"], answer: "Derived from C and C++" }
    ];

    const handleSubmit = async (event) => {
        event.preventDefault();
        let newScore = 0;
        const formData = new FormData(event.target);

        questions.forEach((q) => {
            if (formData.get(q.id) === q.answer) {
                newScore++;
            }
        });

        setScore(newScore);
        localStorage.setItem('postQuizCompleted', JSON.stringify(true));
        alert('üéâ ‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß!');

        // ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏õ‡∏¢‡∏±‡∏á API ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á SQLite
        try {
            const response = await fetch('http://localhost:4000/submit-quiz', {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({
                    student_id: name,
                    score: newScore,
                    correct_answers: newScore,
                    total_questions: questions.length,
                    type: 'post-quiz'
                })
            });
            const data = await response.json();
            console.log('‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ú‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', data);
        } catch (error) {
            console.error('‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å', error);
        }
    };

    if (!isPreQuizCompleted) return null;

    return (
        <div className="max-w-2xl mx-auto p-6 bg-white shadow-lg rounded-md">
            <h1 className="text-xl font-bold text-blue-600 text-center">üìù ‡πÅ‡∏ö‡∏ö‡∏ù‡∏∂‡∏Å‡∏´‡∏±‡∏î‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ö‡∏ó‡∏ó‡∏µ‡πà 1: ‡∏†‡∏≤‡∏©‡∏≤ C# ‡∏Ñ‡∏∑‡∏≠‡∏≠‡∏∞‡πÑ‡∏£</h1>
            
            {!name ? (
                <div className="text-center mt-4">
                    <label className="block mb-2 font-medium">‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•</label>
                    <input
                        type="text"
                        className="border p-2 w-full rounded"
                        placeholder="‡∏ä‡∏∑‡πà‡∏≠-‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•"
                        onChange={(e) => setName(e.target.value)}
                    />
                    <button
                        className="mt-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
                        onClick={() => name && setName(name)}
                    >‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö</button>
                </div>
            ) : score === null ? (
                <form onSubmit={handleSubmit} className="mt-4">
                    {questions.map((q, index) => (
                        <div key={q.id} className="mb-4">
                            <h3 className="font-medium">‡∏Ç‡πâ‡∏≠ {index + 1}: {q.question}</h3>
                            {q.options.map((option) => (
                                <label key={option} className="block">
                                    <input type="radio" name={q.id} value={option} required /> {option}
                                </label>
                            ))}
                        </div>
                    ))}
                    <button type="submit" className="w-full bg-orange-500 text-white py-2 px-4 rounded hover:bg-orange-600">
                        ‚úÖ ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
                    </button>
                </form>
            ) : (
                <div className="text-center mt-6">
                    <h3 className="text-lg font-semibold">üéØ ‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô: {score}/10</h3>
                    <button 
                        onClick={() => router.push('/courses')} 
                        className="mt-4 bg-blue-500 text-white py-2 px-4 rounded hover:bg-blue-600"
                    >üìö ‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡∏´‡∏ô‡πâ‡∏≤‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ</button>
                </div>
            )}
        </div>
    );
}
